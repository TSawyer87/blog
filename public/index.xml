<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NixOS Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on NixOS Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Jun 2025 18:14:54 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Minimal_btrfs_subvolume_install_disko</title>
      <link>http://localhost:1313/posts/minimal_btrfs_subvolume_install_disko/</link>
      <pubDate>Sun, 15 Jun 2025 18:14:54 -0400</pubDate>
      <guid>http://localhost:1313/posts/minimal_btrfs_subvolume_install_disko/</guid>
      <description>&lt;h1 id=&#34;minimal-btrfs-subvol-install-with-disko-and-flakes&#34;&gt;Minimal BTRFS-Subvol Install with Disko and Flakes&lt;/h1&gt;&#xA;&lt;h2 id=&#34;why-i-chose-btrfs&#34;&gt;Why I Chose BTRFS&lt;/h2&gt;&#xA;&lt;p&gt;I chose BTRFS because I was already familiar with it from using it with Arch&#xA;Linux and I found it to be very easy to use. From what I&amp;rsquo;ve read, there are&#xA;licensing issues between the Linux Kernel and ZFS which means that ZFS is not&#xA;part of the Linux Kernel; it&amp;rsquo;s maintained by the OpenZFS project and available&#xA;as a separate kernel module. This can cause issues and make you think more about&#xA;your filesystem than I personally want to at this point.&lt;/p&gt;</description>
    </item>
    <item>
      <title>hacking_the_helix_flake</title>
      <link>http://localhost:1313/posts/hacking_the_helix_flake/</link>
      <pubDate>Fri, 30 May 2025 19:23:32 -0400</pubDate>
      <guid>http://localhost:1313/posts/hacking_the_helix_flake/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#chapter-44&#34;&gt;Chapter 4.4&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#understanding-the-helix-flake-and-modifying-its-behavior&#34;&gt;Understanding the Helix Flake and Modifying its Behavior&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#understanding-the-helix-flakenix&#34;&gt;Understanding the Helix flake.nix&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#top-level-metadata&#34;&gt;Top-Level Metadata&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#inputs&#34;&gt;Inputs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#outputs-function&#34;&gt;Outputs Function&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#common-setup&#34;&gt;Common Setup&lt;/a&gt; - &lt;a href=&#34;#breaking-down-helixdefaultnix&#34;&gt;Breaking Down &lt;code&gt;helix/default.nix&lt;/code&gt;&lt;/a&gt; - &lt;a href=&#34;#making-actual-changes&#34;&gt;Making Actual Changes&lt;/a&gt; - &lt;a href=&#34;#another-way-to-modify-behavior&#34;&gt;Another way to Modify Behavior&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/helix.png&#34;&#xA;    alt=&#34;helix logo&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h1 id=&#34;understanding-the-helix-flake-and-modifying-its-behavior&#34;&gt;Understanding the Helix Flake and Modifying its Behavior&lt;/h1&gt;&#xA;&lt;p&gt;As we&amp;rsquo;ve seen from previous examples, the helix editor repository includes a few&#xA;&lt;code&gt;.nix&lt;/code&gt; files including a &lt;code&gt;flake.nix&lt;/code&gt;. Their flake uses a lot of idiomatic Nix&#xA;code and advanced features. First I will break down their &lt;code&gt;flake.nix&lt;/code&gt; and&#xA;&lt;code&gt;default.nix&lt;/code&gt; to understand why they do certain things. And finally, we will&#xA;change the build to &amp;ldquo;debug&amp;rdquo; mode demonstrating how easily you can modify the&#xA;behavior of a package defined within a Nix flake without changing the original&#xA;source code or the upstream flake directly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using_nushell_with_nixos</title>
      <link>http://localhost:1313/posts/using_nushell_with_nixos/</link>
      <pubDate>Fri, 16 May 2025 19:54:01 -0400</pubDate>
      <guid>http://localhost:1313/posts/using_nushell_with_nixos/</guid>
      <description>&lt;h2 id=&#34;nushell-and-nixos&#34;&gt;Nushell and NixOS&lt;/h2&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/nu.png&#34;&#xA;    alt=&#34;nushell logo&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;:I recently switched default shells from zsh to nushell, this post&#xA;is about some of the challenges and advantages of using nushell with NixOS.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;While the average user might not immediately see significant advantages, those&#xA;who frequently work with structured data formats like JSON, YAML, and CSV –&#xA;such as developers interacting with APIs, system administrators managing&#xA;configurations, and data professionals – will likely find Nushell&amp;rsquo;s native&#xA;data handling and powerful pipeline capabilities a plus. Additionally, users&#xA;who value a more consistent and safer scripting experience might appreciate&#xA;Nushell&amp;rsquo;s language-first design and features like strong typing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nixpkgs_pull_requests</title>
      <link>http://localhost:1313/posts/nixpkgs_pull_requests/</link>
      <pubDate>Thu, 15 May 2025 13:02:06 -0400</pubDate>
      <guid>http://localhost:1313/posts/nixpkgs_pull_requests/</guid>
      <description>&lt;h1 id=&#34;nixpkgs-pull-requests&#34;&gt;Nixpkgs Pull Requests&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv16.png&#34;&#xA;    alt=&#34;window_view&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Pull requests&lt;/strong&gt; communicate changes to a branch in a repository. Once a pull&#xA;request is opened, you can review changes with collaborators and add follow-up&#xA;commits.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A &lt;strong&gt;pull request&lt;/strong&gt; is a proposal to merge a set of changes from one branch&#xA;into another. In a pull request, collaborators can review and discuss the&#xA;proposed set of changes before they integrate the changes into the main&#xA;codebase.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debugging_and_tracing_modules</title>
      <link>http://localhost:1313/posts/debugging_and_tracing_modules/</link>
      <pubDate>Thu, 15 May 2025 10:08:17 -0400</pubDate>
      <guid>http://localhost:1313/posts/debugging_and_tracing_modules/</guid>
      <description>&lt;h1 id=&#34;debugging-and-tracing-nixos-modules&#34;&gt;Debugging and Tracing NixOS Modules&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv17.png&#34;&#xA;    alt=&#34;window_space&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Other related post if you haven&amp;rsquo;t read my previous post on modules, that may&#xA;be helpful before reading this one:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://saylesss88.github.io/posts/nix_modules_explained/&#34;&gt;nix-modules-explained&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;This post is my notes following Nix Hour 40. If it seems a little chaotic,&#xA;try watching one. They are hard to follow if you&amp;rsquo;re not extremely&#xA;familiar with the concepts.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aLy8id4wr-M&amp;amp;t=2120s&#34;&gt;Nix Hour 40&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Nix Code is particularly hard to &lt;strong&gt;debug&lt;/strong&gt; because of (e.g. lazy evaluation,&#xA;declarative nature, layered modules)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using_overlays_to_add_packages</title>
      <link>http://localhost:1313/posts/using_overlays_to_add_packages/</link>
      <pubDate>Wed, 14 May 2025 19:28:57 -0400</pubDate>
      <guid>http://localhost:1313/posts/using_overlays_to_add_packages/</guid>
      <description>&lt;h1 id=&#34;using-overlays-to-add-packages-that-arent-in-nixpkgs&#34;&gt;Using Overlays to add Packages that aren&amp;rsquo;t in Nixpkgs&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;images/pokego.png&#34;&#xA;    alt=&#34;window_view&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;It is very common to use overlays in Nix to install packages that aren&amp;rsquo;t&#xA;available in the standard Nixpkgs repository.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Overlays are one of the primary and recommended ways to extend and customize&#xA;your Nix environment. It&amp;rsquo;s important to remember that Nix overlays are made to&#xA;allow you to modify or extend the package set provided by Nixpkgs (or other&#xA;Nix sources) without directly altering the original package definitions. This&#xA;is crucial for maintaining reproducibility and avoiding conflicts. Overlays&#xA;are essentially functions that take the previous package set and allow you to&#xA;add, modify, or remove packages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix_lang_basics</title>
      <link>http://localhost:1313/posts/nix_lang_basics/</link>
      <pubDate>Wed, 14 May 2025 19:28:12 -0400</pubDate>
      <guid>http://localhost:1313/posts/nix_lang_basics/</guid>
      <description>&lt;h1 id=&#34;the-nix-language&#34;&gt;The Nix Language&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv13.png&#34;&#xA;    alt=&#34;window_view&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Nix as a programming language can be thought of as a kind of &amp;ldquo;JSON, but with&#xA;functions&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;All statements are declarative, meaning that there&amp;rsquo;s no sequential flow of&#xA;instructions that makes up a Nix package. Instead, functions are called that&#xA;assign values to fields in attribute sets, which in turn may get assigned to&#xA;other values.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-does-nix-work&#34;&gt;How does Nix work&lt;/h2&gt;&#xA;&lt;p&gt;Nix is a pure, functional, lazy, declarative, and reproducible programming&#xA;language.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparing_flakes_to_traditional_nix</title>
      <link>http://localhost:1313/posts/comparing_flakes_to_traditional_nix/</link>
      <pubDate>Wed, 14 May 2025 19:27:18 -0400</pubDate>
      <guid>http://localhost:1313/posts/comparing_flakes_to_traditional_nix/</guid>
      <description>&lt;h1 id=&#34;introduction-flakes-and-traditional-nix&#34;&gt;Introduction: Flakes and Traditional Nix&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/nixWinter.png&#34;&#xA;    alt=&#34;nix winter&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;This post is based on notes from Nix-Hour #4, comparing Traditional Nix and Flakes, focusing on achieving pure build results. See the &lt;a href=&#34;https://www.youtube.com/watch?v=atmoYyBAhF4&#34;&gt;YouTube video&lt;/a&gt; for the original content. This guide adapts the information for clarity and ease of understanding.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;what-is-purity-in-nix&#34;&gt;What is Purity in Nix?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A key benefit of Nix Flakes is their &lt;em&gt;default&lt;/em&gt; enforcement of &lt;strong&gt;pure evaluation&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;In Nix, an &lt;strong&gt;impure operation&lt;/strong&gt; depends on something &lt;em&gt;outside&lt;/em&gt; its explicit inputs. Examples include:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Declarative_depinject</title>
      <link>http://localhost:1313/posts/declarative_depinject/</link>
      <pubDate>Wed, 14 May 2025 19:26:36 -0400</pubDate>
      <guid>http://localhost:1313/posts/declarative_depinject/</guid>
      <description>&lt;h1 id=&#34;declarative-dependency-injection-in-nix-flakes&#34;&gt;Declarative Dependency Injection in Nix Flakes&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv6.png&#34;&#xA;    alt=&#34;cyber&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;This post explores a method for injecting dependencies into NixOS modules from&#xA;a flake in a more declarative way, offering an alternative to &lt;code&gt;specialArgs&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-problem-with-specialargs&#34;&gt;The Problem with specialArgs&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;As mentioned in &lt;a href=&#34;https://saylesss88.github.io/posts/nix_flakes_tips/&#34;&gt;post&lt;/a&gt;,&#xA;&lt;code&gt;specialArgs&lt;/code&gt; and &lt;code&gt;extraSpecialArgs&lt;/code&gt; can be used to pass dependencies and&#xA;variables from flakes to modules.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;However, &lt;code&gt;specialArgs&lt;/code&gt; injects values directly into every module&amp;rsquo;s argument&#xA;list.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;This approach deviates from NixOS&amp;rsquo;s typical declarative data flow model.&#xA;Instead of explicit dependency passing, modules receive extra, unstructured&#xA;variables that aren&amp;rsquo;t part of the standard module options.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Derivations_explained</title>
      <link>http://localhost:1313/posts/derivations_explained/</link>
      <pubDate>Wed, 14 May 2025 19:25:48 -0400</pubDate>
      <guid>http://localhost:1313/posts/derivations_explained/</guid>
      <description>&lt;h1 id=&#34;introduction-to-nix-derivations&#34;&gt;Introduction to Nix Derivations&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv10.png&#34;&#xA;    alt=&#34;gruv10&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A derivation in Nix is a fundamental concept that describes how to build a piece of software or a resource (e.g., a package, library, or configuration file). Think of it as a recipe for creating something within the Nix ecosystem.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;For beginners, the analogy of a cooking recipe is helpful:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ingredients (Dependencies):&lt;/strong&gt; What other software or libraries are needed.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Steps (Build Instructions):&lt;/strong&gt; The commands to compile, configure, and install.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Final Dish (Output):&lt;/strong&gt; The resulting package or resource.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A Nix derivation encapsulates all this information, telling Nix what inputs&#xA;to use, how to build it, and what the final output should be.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple_nix_service</title>
      <link>http://localhost:1313/posts/simple_nix_service/</link>
      <pubDate>Wed, 14 May 2025 19:25:11 -0400</pubDate>
      <guid>http://localhost:1313/posts/simple_nix_service/</guid>
      <description>&lt;h1 id=&#34;building-a-custom-nixos-service-with-flakes-and-overlays&#34;&gt;Building a Custom NixOS Service with Flakes and Overlays&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv12.png&#34;&#xA;    alt=&#34;gruv12&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;TL;DR NixOS&amp;rsquo;s declarative configuration and flakes make it easy to create&#xA;custom services. This post shows how to build a minimal service using flakes&#xA;and overlays for a &amp;ldquo;meow&amp;rdquo; command&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;This will be a complete minimal configuration for testing purposes.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;create-project-directory&#34;&gt;Create Project Directory&lt;/h2&gt;&#xA;&lt;p&gt;Start by creating a directory to hold your project, I called mine &lt;code&gt;meow&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir meow &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd meow&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-flake&#34;&gt;Create flake&lt;/h2&gt;&#xA;&lt;p&gt;Create a &lt;code&gt;flake.nix&lt;/code&gt; with the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix_flakes_tips</title>
      <link>http://localhost:1313/posts/nix_flakes_tips/</link>
      <pubDate>Wed, 14 May 2025 19:24:27 -0400</pubDate>
      <guid>http://localhost:1313/posts/nix_flakes_tips/</guid>
      <description>&lt;h1 id=&#34;shallow-clone-nixpkgs&#34;&gt;Shallow Clone Nixpkgs&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv8.png&#34;&#xA;    alt=&#34;gruv8&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Shallow clone nixpkgs, the full Git history isn&amp;rsquo;t always necessary and this&#xA;can speed up build times.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The only issue I&amp;rsquo;ve had is &lt;code&gt;nix-index-database&lt;/code&gt; not working well with the&#xA;shallow clone&amp;hellip; Other than that no issues after running for a few months.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# flake.nix&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git+https://github.com/NixOS/nixpkgs?shallow=1&amp;amp;ref=nixos-unstable&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Some times when you might need a full clone are debugging and working with&#xA;repository history but those are rare.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;import-your-non-flake-wallpaper-repo&#34;&gt;Import your Non-Flake Wallpaper Repo&lt;/h2&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Importing your non-flake wallpapers repo:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# flake.nix&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wallpapers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:saylesss88/wallpapers&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      flake &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;After adding the input I can access individual wallpapers by adding the &lt;code&gt;inputs&lt;/code&gt; argument and&#xA;something like &lt;code&gt;path = &amp;quot;${inputs.wallpapers}/Aesthetic Scenery.jpg&amp;quot;;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;understanding--patterns&#34;&gt;Understanding @-patterns&lt;/h2&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;Understanding &lt;code&gt;@-patterns&lt;/code&gt;, being able to reference your outputs argument set as a whole. An&#xA;&lt;code&gt;@-pattern&lt;/code&gt; is a way for a function can access variadic attributes (i.e. varying number of&#xA;arguments).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# flake.nix&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    home-manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:nix-community/home-manager/master&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    home-manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;follows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nixpkgs&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stylix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github:danth/stylix&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nixpkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    home-manager&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt; inputs:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the above example to add the modules to your nixosConfigurations you would add something&#xA;like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working_with_nixpkgs_locally</title>
      <link>http://localhost:1313/posts/working_with_nixpkgs_locally/</link>
      <pubDate>Wed, 14 May 2025 19:23:32 -0400</pubDate>
      <guid>http://localhost:1313/posts/working_with_nixpkgs_locally/</guid>
      <description>&lt;p&gt;/home/jr/blog/content/posts/working_with_nixpkgs_locally.md: line 1: q: command not found&lt;/p&gt;&#xA;&lt;h1 id=&#34;working-with-nixpkgs-locally-benefits-and-best-practices&#34;&gt;Working with Nixpkgs Locally: Benefits and Best Practices&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv18.png&#34;&#xA;    alt=&#34;gruv18&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Nixpkgs, the package repository for NixOS, is a powerful resource for building and customizing software.&lt;/li&gt;&#xA;&lt;li&gt;Working with a local copy enhances development, debugging, and contribution workflows.&lt;/li&gt;&#xA;&lt;li&gt;This post covers setting up a local Nixpkgs repository, searching for dependencies, and leveraging its advantages, incorporating tips from the Nix community.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;i-why-work-with-nixpkgs-locally&#34;&gt;I. Why Work with Nixpkgs Locally?&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A local Nixpkgs repository offers significant advantages for Nix developers:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building_your_config_as_a_package</title>
      <link>http://localhost:1313/posts/building_your_config_as_a_package/</link>
      <pubDate>Wed, 14 May 2025 19:21:54 -0400</pubDate>
      <guid>http://localhost:1313/posts/building_your_config_as_a_package/</guid>
      <description>&lt;h1 id=&#34;building-your-configuration-as-a-package&#34;&gt;Building your configuration as a Package&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv4.png&#34;&#xA;    alt=&#34;gruv4&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;TL;DR This post demonstrates other ways to modularize your config as well as&#xA;going into more advanced outputs.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;This allows you to build your configuration as a package allowing you to&#xA;separate the process of creating a configuration artifact and applying it to&#xA;the live system giving you a reusable artifact that can be used to deploy to&#xA;different systems. This can make it easier to isolate it from other parts of&#xA;your system making debugging easier.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Conditional_configuration</title>
      <link>http://localhost:1313/posts/conditional_configuration/</link>
      <pubDate>Wed, 14 May 2025 19:21:09 -0400</pubDate>
      <guid>http://localhost:1313/posts/conditional_configuration/</guid>
      <description>&lt;h1 id=&#34;conditional-configuration&#34;&gt;Conditional Configuration&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv5.png&#34;&#xA;    alt=&#34;gruv5&#34; width=&#34;700&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;With options it&amp;rsquo;s easy to conditionally install something based on if another&#xA;program is enabled in your configuration.&lt;/p&gt;&#xA;&lt;h2 id=&#34;hyprland-module&#34;&gt;Hyprland Module&lt;/h2&gt;&#xA;&lt;p&gt;For example, if I have an option to enable or disable hyprland like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# hyprland.nix&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pkgs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lib&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  config&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inputs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}: &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cfg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;custom&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hyprland;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;custom&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hyprland &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkOption {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;types&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bool;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      description &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enable hyprland module&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mkIf cfg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    home&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;packages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pkgs; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# swww&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      grim&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      slurp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      wl-clipboard-rs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cliphist&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      swappy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ydotool&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      wpaperd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      wofi&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      hyprpicker&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      pavucontrol&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      blueman&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# lxqt.lxqt-policykit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      brightnessctl&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      polkit_gnome&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      wlr-randr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      wtype&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      rose-pine-cursor&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# nwg-look&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# yad&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# gtk-engine-murrine&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# .. snip ..&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Since the above module is set to false, it is necessary to add&#xA;&lt;code&gt;custom.hyprland.enable = true&lt;/code&gt; to my &lt;code&gt;home.nix&lt;/code&gt; to have Nix add it&#xA;to my configuration. And since &lt;code&gt;home.packages&lt;/code&gt; is wrapped in&#xA;&lt;code&gt;config = lib.mkIf cfg.enable&lt;/code&gt; Those packages will only be installed&#xA;if the module is enabled.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Top_level_attributes_explained</title>
      <link>http://localhost:1313/posts/top_level_attributes_explained/</link>
      <pubDate>Wed, 14 May 2025 19:20:34 -0400</pubDate>
      <guid>http://localhost:1313/posts/top_level_attributes_explained/</guid>
      <description>&lt;h1 id=&#34;understanding-top-level-attributes-in-nixos-modules&#34;&gt;Understanding Top-Level Attributes in NixOS Modules&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv9.png&#34;&#xA;    alt=&#34;cyber&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;This explanation is based on insights from Infinisil, a prominent figure in the&#xA;Nix community, to help clarify the concept of top-level attributes within&#xA;NixOS modules.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-core-of-a-nixos-system-systembuildtoplevel&#34;&gt;The Core of a NixOS System: &lt;code&gt;system.build.toplevel&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;In a NixOS system, everything is built from a single &amp;ldquo;system derivation.&amp;rdquo; The&#xA;command &lt;code&gt;nix-build &#39;&amp;lt;nixpkgs/nixos&amp;gt;&#39; -A system&lt;/code&gt; initiates this build process.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;-A system&lt;/code&gt; part tells Nix to focus on the &lt;code&gt;system&lt;/code&gt; attribute defined in&#xA;the &lt;code&gt;&#39;&amp;lt;nixpkgs/nixos&amp;gt;&#39;&lt;/code&gt; file (which is essentially &lt;code&gt;./default.nix&lt;/code&gt; within the&#xA;Nixpkgs repository).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix_flakes_explained</title>
      <link>http://localhost:1313/posts/nix_flakes_explained/</link>
      <pubDate>Wed, 14 May 2025 19:19:51 -0400</pubDate>
      <guid>http://localhost:1313/posts/nix_flakes_explained/</guid>
      <description>&lt;h1 id=&#34;nix-flakes-explained&#34;&gt;Nix Flakes Explained&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv23.png&#34;&#xA;    alt=&#34;gruv3&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;This explanation highlights common areas of confusion for those new to Nix&#xA;Flakes, aiming to clarify concepts rather than serve as a comprehensive guide.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-nix-flake&#34;&gt;What is a Nix Flake?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;At its core, a flake is a source tree (like a Git repository) that contains&#xA;a &lt;code&gt;flake.nix&lt;/code&gt; file. This file provides a standardized way to access Nix&#xA;artifacts such as packages and modules.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Think of &lt;code&gt;flake.nix&lt;/code&gt; as the central entry point of a flake. It not only&#xA;defines what the flake produces but also declares its dependencies.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding_package_definitions</title>
      <link>http://localhost:1313/posts/understanding_package_definitions/</link>
      <pubDate>Wed, 14 May 2025 19:19:10 -0400</pubDate>
      <guid>http://localhost:1313/posts/understanding_package_definitions/</guid>
      <description>&lt;h1 id=&#34;understanding-package-definitions-in-nix&#34;&gt;Understanding Package Definitions in Nix&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv1.png&#34;&#xA;    alt=&#34;gruvvy-bedroom&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;In Nix, the concept of a &lt;strong&gt;package&lt;/strong&gt; can refer to two things:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A collection of files and data that constitute a piece of software or an&#xA;artifact.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A Nix &lt;strong&gt;expression&lt;/strong&gt; that describes how to create such a collection. This&#xA;expression acts as a blueprint before the package exists in a tangible form.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The process begins with writing a &lt;strong&gt;package definition&lt;/strong&gt; using the Nix language.&#xA;This definition contains the necessary instructions and metadata about the&#xA;software you intend to &amp;ldquo;package.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix_repl_tips</title>
      <link>http://localhost:1313/posts/nix_repl_tips/</link>
      <pubDate>Wed, 14 May 2025 19:18:13 -0400</pubDate>
      <guid>http://localhost:1313/posts/nix_repl_tips/</guid>
      <description>&lt;h1 id=&#34;nix-repl-list-available-commands&#34;&gt;Nix Repl List available commands&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv11.png&#34;&#xA;    alt=&#34;gruv11&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://nix.dev/manual/nix/2.17/command-ref/new-cli/nix3-repl&#34;&gt;Nix Reference Manual Nix Repl&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;The command: &lt;code&gt;nix repl&lt;/code&gt; - starts an interactive environment for evaluating&#xA;Nix expressions.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;This command provides an interactive environment for evaluating Nix expressions. (REPL stands for &amp;lsquo;read–eval–print loop&amp;rsquo;.)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;On startup, it loads the Nix expressions named files and adds them into the&#xA;lexical scope. You can load addition files using the &lt;code&gt;:l &amp;lt;filename&amp;gt;&lt;/code&gt; command,&#xA;or reload all files using &lt;code&gt;:r&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding_nix_functions</title>
      <link>http://localhost:1313/posts/understanding_nix_functions/</link>
      <pubDate>Wed, 14 May 2025 19:17:32 -0400</pubDate>
      <guid>http://localhost:1313/posts/understanding_nix_functions/</guid>
      <description>&lt;h1 id=&#34;understanding-nix-functions&#34;&gt;Understanding Nix Functions&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/nixLogo.png&#34;&#xA;    alt=&#34;NixFlakeLogo&#34; width=&#34;500&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Functions are a fundamental concept in Nix and are prevalent throughout Nix code. Grasping how they work is crucial for understanding and writing Nix expressions.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-single-argument-nature-of-nix-functions&#34;&gt;The Single-Argument Nature of Nix Functions&lt;/h2&gt;&#xA;&lt;p&gt;A key concept to understand is that in Nix, every function conceptually takes &lt;strong&gt;exactly one argument&lt;/strong&gt;. What might appear as multi-argument functions are actually achieved through a technique called &lt;strong&gt;currying&lt;/strong&gt;, where a series of nested single-argument functions are used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intro_to_jujutsu</title>
      <link>http://localhost:1313/posts/intro_to_jujutsu/</link>
      <pubDate>Wed, 14 May 2025 19:07:59 -0400</pubDate>
      <guid>http://localhost:1313/posts/intro_to_jujutsu/</guid>
      <description>&lt;h1 id=&#34;intro-to-jujutsu-using-jj-in-an-existing-git-repo&#34;&gt;Intro to Jujutsu (Using jj in an existing Git Repo)&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/jujutsu.png&#34; alt=&#34;Jujutsu Logo&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;You can use jujutsu (jj) with existing Git repositories with one command.&#xA;&lt;code&gt;jj git init --colocate&lt;/code&gt; or &lt;code&gt;jj git init --git-repo /path/to/git_repository&lt;/code&gt;.&#xA;The native repository format for jj is still a work in progress so people&#xA;typically use a &lt;code&gt;git&lt;/code&gt; repository for backend.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Unlike &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;jj&lt;/code&gt; has no index &amp;ldquo;staging area&amp;rdquo;. It treats the working copy&#xA;as an actual commit. When you make changes to files, these changes are&#xA;automatically recorded to the working commit. There&amp;rsquo;s no need to explicitly&#xA;stage changes because they are already part of the commit that represents&#xA;your current working state.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nix_modules_explained</title>
      <link>http://localhost:1313/posts/nix_modules_explained/</link>
      <pubDate>Wed, 14 May 2025 19:03:40 -0400</pubDate>
      <guid>http://localhost:1313/posts/nix_modules_explained/</guid>
      <description>&lt;h1 id=&#34;nixos-modules&#34;&gt;NixOS Modules&lt;/h1&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/images/gruv3.png&#34;&#xA;    alt=&#34;gruv3&#34; width=&#34;1000&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;TL;DR: In this post I break down the NixOS module system and explain how to&#xA;define options. As well as how to test modules with the repl.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Most modules are functions that take an attribute set and return an attribute&#xA;set.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Refresher&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;An &lt;strong&gt;attribute set&lt;/strong&gt; is a collection of name-value pairs wrapped in curly&#xA;braces:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  int &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;A &lt;strong&gt;function&lt;/strong&gt; with an attribute set argument:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ a&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; b }: a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;The simplest possible &lt;strong&gt;NixOS Module&lt;/strong&gt;:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; }:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;NixOS produces a full system configuration by combining smaller, more isolated&#xA;and reusable components: &lt;strong&gt;Modules&lt;/strong&gt;. In my opinion modules are one of the&#xA;first things you should understand when learning about NixOS.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
